apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: shopmicro
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: backend
        app.kubernetes.io/component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: backend
        image: shopmicro-backend:v1.2
        imagePullPolicy: Never
        ports:
        - containerPort: 3001
          name: http
        env:
        - name: OTEL_SERVICE_NAME
          value: "shopmicro-backend"
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: "http://tempo:4318"
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: shopmicro-config
              key: BACKEND_NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: shopmicro-config
              key: BACKEND_PORT
        - name: POSTGRES_URL
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@postgres-service:5432/$(POSTGRES_DB)"
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: shopmicro-config
              key: POSTGRES_USER
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: shopmicro-config
              key: POSTGRES_DB
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: shopmicro-secrets
              key: postgres-password
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        - name: FRONTEND_URL
          valueFrom:
            configMapKeyRef:
              name: shopmicro-config
              key: FRONTEND_URL
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: shopmicro-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: tmp-volume
        emptyDir: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: shopmicro
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/component: api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb  # AWS example
spec:
  selector:
    app.kubernetes.io/name: backend
  ports:
  - port: 3001
    targetPort: 3001
    name: http
    protocol: TCP
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: shopmicro
  labels:
    app.kubernetes.io/name: backend
    app.kubernetes.io/component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60